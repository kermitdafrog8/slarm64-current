#!/bin/bash

ulimit -s unlimited

#
# seamonkey.SlackBuild
# Heavily based on the original Slackware build scripts,
# Modified by Stuart Winter <mozes@slackware.com>
#
# Copyright 2008, 2009, 2010, 2011, 2012  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

##
## Build note:
## Because this build references the libffi sources from the firefox directory,
## it means that when building it from the 'patches' directory, this doesn't work.

# Record toolchain & other info for the build log:
slackbuildinfo

# sed 4.2 is needed:https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850984
#sed --version | head -n1 | grep 4.2 || { echo "need sed 4.2" ; exit 1 ; }

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/$PKGSERIES/$PKGNAM
export PORTCWD=$PWD

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete & re-create temporary directories then cd into $TMPBUILD

# Determine the CFLAGS for the known architectures:
case $ARCH in
   # arm used to use -O
   arm)     export SLKCFLAGS="-g -march=armv7-a -mfpu=vfpv3-d16 -Wformat -fexceptions -fPIC -Wl,-z,relro -Wl,-z,now"
            export SLKOPTIM="-O"
            export LDFLAGS="-Wl,--no-as-needed -Wl,--no-keep-memory -Wl,--reduce-memory-overheads"
            # The little hacks section:
            # Firefox 17.0 adds webrtc but it does not work on ARM
            SLKCONFARGS="--disable-webrtc"
            #
            export SLKCONFARGS="$SLKCONFARGS \
                                --with-float-abi=hard \
                                --target=${SLK_ARCH_BUILDTARGET} \
                                --disable-elf-hack \
                                --disable-crashreporter \
                                --enable-system-sqlite \
                                --with-system-libvpx \
                                --enable-system-ffi "
            export LIBDIRSUFFIX="" ;;
   *)       export SLKCFLAGS="-O2" ;;
esac

# If there is a private Google API key available at compile time, use
# it to enable support for Google Safe Browsing. For Slackware builds,
# we use a private key issued for the Slackware project. If you are
# rebuilding and need this support, or you are producing your own
# distribution, you may obtain your own Google API key at no charge by
# following these instructions:
# https://bugzilla.mozilla.org/show_bug.cgi?id=1377987#c0
if [ -f "$PORTCWD/.GoogleSafeBrowsingAPI_Key" ]; then
   GOOGLE_API_KEY="--with-google-api-keyfile=$PORTCWD/.GoogleSafeBrowsingAPI_Key"
fi

# Use the 'gold' ld linker due to RAM issues:
mkdir -vpm755 $TMPBUILD/gold
ln -vfs /usr/bin/ld.gold $TMPBUILD/gold/ld
export PATH=$TMPBUILD/gold:$PATH

# Extract source:
echo "****** Extracting source... (will take a while) *******"
tar xf $CWD/$PKGNAM-${VERSION}.source.tar.?*
#tar xf $PORTCWD/sources/$PKGNAM-${VERSION}.source*tar*
cd comm* || cd $PKGNAM* || exit 1
slackhousekeeping

# Apply patches for ARM:
# All from Fedora:
xzcat $PORTCWD/sources/xulrunner-27.0-build-arm.patch.xz | sed 's?/mozilla-release/?/mozilla/?g' | patch -p1 --verbose || exit 1
pushd mozilla
for pf in \
  firefox-48-mozilla-256180.patch.xz \
  firefox-49-mozilla-revert-1148544.patch.xz \
  firefox-50-mozilla-440908.patch.xz \
  firefox-51-build-prbool.patch.xz \
  firefox-51-mozilla-1005640.patch.xz \
  firefox-51-mozilla-1321579.patch.xz \
  seamonkey-2.46-exthandler.patch.xz \
  ; do
  auto_apply_patch $PORTCWD/sources/$pf || exit 1
done
popd

# Apply patches from x86 Slackware:
# Retain GTK+ v2 scrolling behavior:
zcat $CWD/sm.ui.scrollToClick.diff.gz | patch -p1 --verbose || exit 1

# Our building options, in a configure-like display ;)
OPTIONS="$SLKCONFARGS \
   --prefix=/usr \
   --libdir=/usr/lib${LIBDIRSUFFIX} \
   --enable-optimize=$SLKOPTIM \
   --enable-cpp-rtti \
   --enable-default-toolkit=cairo-gtk3 \
   --enable-startup-notification \
   --enable-alsa \
   --disable-debug \
   --with-default-mozilla-five-home=/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION} \
   --enable-strip \
   --disable-tests \
   --enable-safe-browsing \
   --enable-accessibility \
   $GOOGLE_API_KEY \
   --disable-updater \
   --enable-chrome-format=omni \
   --disable-necko-wifi \
   --enable-extensions=default,irc \
   --without-system-nspr \
   --with-system-zlib \
   --with-pthreads \
   --enable-application=suite \
   --host=${SLK_ARCH_BUILDTARGET} \
   --target=${SLK_ARCH_BUILDTARGET}"

export BUILD_OFFICIAL=1
export MOZILLA_OFFICIAL=1
export MOZ_MAKE_FLAGS="$NUMJOBS"
export MOZ_LINK_FLAGS="$SLKLDFLAGS"
export LDFLAGS="$SLKLDFLAGS"
export MOZ_OPT_FLAGS="$SLKCFLAGS"
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCFLAGS -fno-delete-null-pointer-checks"
export DEBUGOPTS="--disable-debug --enable-strip"

#ac_cv_path_MAKE=/usr/bin/make-3.80 \

# Clear some variables that could break the build
unset DBUS_SESSION_BUS_ADDRESS ORBIT_SOCKETDIR SESSION_MANAGER \
  XDG_SESSION_COOKIE XAUTHORITY MAKEFLAGS

# Assemble our .mozconfig:
echo > .mozconfig

# Mozilla devs enforce using an objdir for building
# https://developer.mozilla.org/en/Configuring_Build_Options#Building_with_an_objdir
mkdir obj
echo "mk_add_options MOZ_OBJDIR=$(pwd)/obj" >> .mozconfig
# This directory is also needed or the build will fail:
mkdir -p mozilla/obj

# Write in it the options above
for option in $OPTIONS; do echo "ac_add_options $option" >> .mozconfig; done

echo "ac_add_options --disable-tests" >> .mozconfig
make -f client.mk build || exit 1
make -f client.mk install DESTDIR=$PKG || exit 1

# Keep the "obsolete" nspr headers:
if [ ! -d mozilla/dist/include/nspr/obsolete ]; then
  mkdir -p mozilla/dist/include/nspr/obsolete
  cp -a mozilla/nsprpub/pr/include/obsolete/*.h mozilla/dist/include/nspr/obsolete
fi

# Install nspr/nss headers.
for includedir in nspr nspr/obsolete nspr/private ; do
  mkdir -p $PKG/usr/include/seamonkey-${VERSION}/$includedir
  cp -aL mozilla/dist/include/${includedir}/*.h $PKG/usr/include/seamonkey-${VERSION}/$includedir
done
cp -aL mozilla/dist/include/*.tbl mozilla/dist/include/*.msg $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/include/*.h $PKG/usr/include/seamonkey-${VERSION}
cp -aL mozilla/dist/sdk/include/* $PKG/usr/include/seamonkey-${VERSION}
# compat symlinks
( cd $PKG/usr/include/seamonkey-${VERSION}
  # Relocate anything that might be in the nss directory, and replace the directory with a symlink.
  # make install was putting an empty directory here, which was breaking other compiles.
  if [ -d nss ]; then
    mv nss/* .
    rmdir nss
  fi
  ln -sf . nss
  ln -sf . plugin
  ln -sf . xpcom
)

# We don't need this stuff in the package:
rm -rf $PKG/usr/lib${LIBDIRSUFFIX}/seamonkey-devel-$VERSION

chown -R root:root $PKG/usr/include/seamonkey-${VERSION}
find $PKG/usr/include/seamonkey-${VERSION} -name "*.h" -type f -exec chmod 644 {} \;
# Create a more generic include files symlink:
( cd $PKG/usr/include
  if [ ! -e seamonkey ]; then
    ln -sf seamonkey-${VERSION} seamonkey
  fi
)

# Install pkgconfig files:
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig
for file in $CWD/pkgconfig/* ; do
cat $file \
  | sed -e "s/@LIB@/lib${LIBDIRSUFFIX}/" \
  -e "s/@VERSION@/$VERSION/" \
  > $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig/$(basename $file)
done

# Add symlinks for the pkgconfig files:
( cd $PKG/usr/lib${LIBDIRSUFFIX}/pkgconfig
  ln -s seamonkey-libxul.pc libxul.pc
  ln -s seamonkey-plugin.pc plugin.pc
  ln -s seamonkey-xpcom.pc xpcom.pc
  # These are now provided by the mozilla-nss package:
  #ln -s seamonkey-nspr.pc nspr.pc
  #ln -s seamonkey-nss.pc nss.pc
)

# This remains the standard plugin directory for all browsers.
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/mozilla/plugins

# This is traditional.
( cd $PKG/usr/lib${LIBDIRSUFFIX}
  if [ ! -e seamonkey ]; then
    ln -sf seamonkey-${VERSION} seamonkey
  fi
)

mkdir -p $PKG/usr/share/applications
cp -a $CWD/*.desktop $PKG/usr/share/applications
chown -R root:root $PKG/usr/share/applications
chmod 644 $PKG/usr/share/applications/*
mkdir -p $PKG/usr/share/pixmaps
cp -a $CWD/*.png $PKG/usr/share/pixmaps
chown -R root:root $PKG/usr/share/pixmaps
chmod 644 $PKG/usr/share/pixmaps/*

mkdir -p $PKG/usr/doc/seamonkey-$VERSION
( cd mozilla
  cp -a \
    LEGAL LICENSE README.txt \
    $PKG/usr/doc/seamonkey-$VERSION
)

mkdir -p $PKG/install
install -vpm644 $CWD/slack-desc $PKG/install/
zcat $CWD/doinst.sh.gz | sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" \
  > $PKG/install/doinst.sh

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir

# Change the architecture of the package name since Seamonkey 2.1b2+:
# doesn't support armv4:
# export SLACKPACKAGE=$PKGNAM-$VERSION-armv5t-$BUILD.tgz

slackslack      # chown -R root:root, chmod -R og-w, slackchown, slack644docs
# Taken care of above:
#slackdesc       # install slack-desc and doinst.sh
slackmp         # run makepkg -l y -c n

#################################################
# Create an so-libs package in l/ for rpm to use
#################################################

export PKGNAM=seamonkey-solibs
export SLACKPACKAGE=$PKGNAM-$VERSION-$PKGARCH-$BUILD.txz
export PKGSERIES=l

cd $TMPBUILD
rm -rf package-$PKGNAM
mkdir -vpm755 package-$PKGNAM
cd package-$PKGNAM

mkdir -vpm755 usr/{doc,lib${LIBDIRSUFFIX}/seamonkey-${VERSION}}
mkdir install
cp -a $PKG/usr/doc/seamonkey-$VERSION usr/doc

mkdir -p $TMPBUILD/package-seamonkey-solibs/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION}
for file in libfreebl3.chk libfreebl3.so libmozsqlite3.so \
  libnspr4.so libnss* libplc4.so libplds4.so libsmime3.so libsoftokn3.chk \
  libsoftokn3.so libssl3.so ; do
  cp -a $PKG/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION}/$file \
  $TMPBUILD/package-seamonkey-solibs/usr/lib${LIBDIRSUFFIX}/seamonkey-${VERSION}
done
mkdir -vpm755 $TMPBUILD/package-seamonkey-solibs/install
cat << EOF | sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" > $TMPBUILD/package-seamonkey-solibs/install/doinst.sh
( cd usr/lib ; rm -rf seamonkey )
( cd usr/lib ; ln -sf seamonkey-$VERSION seamonkey )
if ! grep /usr/lib/seamonkey etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  echo "/usr/lib/seamonkey" >> etc/ld.so.conf
fi
if [ -x /sbin/ldconfig ]; then
  /sbin/ldconfig 2> /dev/null
fi
EOF
cat << EOF > $TMPBUILD/package-seamonkey-solibs/install/slack-desc
                |-----handy-ruler------------------------------------------------------|
seamonkey-solibs: seamonkey-solibs (Shared libraries from Seamonkey)
seamonkey-solibs:
seamonkey-solibs: This package contains a subset of the shared libraries from Seamonkey
seamonkey-solibs: to provide runtime support for various programs.
seamonkey-solibs: This package is built from the Seamonkey sources and is provided
seamonkey-solibs: as a standalone runtime package for people who do not want to install
seamonkey-solibs: the entire seamonkey package (as for server use).
seamonkey-solibs:
seamonkey-solibs: This package is runtime only.  The include files and other files for
seamonkey-solibs: development can be found in the seamonkey package.
seamonkey-solibs:
EOF

slackmp         # run makepkg -l y -c n

#eof
