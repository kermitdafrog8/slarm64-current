#!/bin/bash
set +o posix

# mozilla-firefox.SlackBuild
# by Stuart Winter
# Based on Unbranded 'Firefox' build script from Slackware 13.
# 03-April-2009
#
# Copyright 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Record toolchain & other info for the build log:
slackbuildinfo

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/$PKGSERIES/$PKGNAM
export PORTCWD=$PWD

# Major version number - needed for /usr/lib/firefox dir:
MAJORVER=$VERSION
MOZVERS=${MOZVERS:-release}
RELEASEVER=$(echo $VERSION | cut -f 1 -d r | cut -f 1 -d b | cut -f 1 -d e)

# Specify this variable for a localized build.
# For example, to build a version of Firefox with Italian support, run
# the build script like this:
#
# MOZLOCALIZE=it ./arm/build
#
MOZLOCALIZE=${MOZLOCALIZE:-}

# Without LANG=C, building the Python environment may fail with:
# "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 36: ordinal not in range(128)"
LANG=C

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete & re-create temporary directories then cd into $TMPBUILD

# Determine the CFLAGS for the known architectures:
# We have an ARM hack below where it appends  -O1 -fno-schedule-insns to ".mozconfig"
# This is because of the way that we build the config file - the $SLKCFLAGS doesn't make it there
# I may fix this at some point, but the work-around will probably do until it's fixed upstream:
case $ARCH in
   arm)  SLKCFLAGS="-fstack-protector -Wformat"
         SLKCXXFLAGS="-fstack-protector -Wformat"
         OPTIMIZE=" --enable-optimize=-O1 "
         SLKCPPFLAGS="" ## this needs to be compiled with -O to use this
         SLKLDFLAGS=" -Wl,--as-needed -Wl,--reduce-memory-overheads -Wl,--no-keep-memory -Wl,--stats"
         export SLKCONFARGS="$SLKCONFARGS \
                    --enable-system-ffi \
                    --enable-pie \
                    \
                    --disable-eme \
                    --disable-crashreporter \
                    --disable-updater \
                    --disable-gconf \
                    --disable-strip \
                    --disable-install-strip \
                    \
                    --host=$ARCH-slackware-linux-gnueabi \
                    --target=$ARCH-slackware-linux-gnueabi"
            export LIBDIRSUFFIX="" ;;
   *)       export SLKCFLAGS="-O1" ;;
esac

# PGO is disabled by default:
PGO=${PGO:-no}

# If not specified, figure out if this is a beta, an esr
# or a release (we start assuming this last):
MOZVERS=${MOZVERS:-release}
if echo $VERSION | grep -q b ; then # we think it is a beta
  if tar tf $CWD/firefox-$VERSION.source.tar.?z* | grep -q ^mozilla-beta/ ; then
    MOZVERS=beta
  fi
elif echo $VERSION | grep -q esr ; then # we think it is an esr
  if tar tf $CWD/firefox-$VERSION.source.tar.?z* | grep -q ^mozilla-esr$RELEASEVERMAJ/ ; then
    MOZVERS=esr$RELEASEVERMAJ
  fi
fi

# Use the 'gold' ld linker due to RAM issues:
#mkdir -vpm755 $TMPBUILD/gold
#ln -vfs /usr/bin/ld.gold $TMPBUILD/gold/ld
#export PATH=$TMPBUILD/gold:$PATH

# Extract source:
echo "Extracting source"
tar xf $CWD/firefox-$VERSION*source*tar.?z*
#tar xf $PORTCWD/sources/firefox-$VERSION*source*tar*
cd mozilla* || cd firefox* || exit 1
slackhousekeeping

# Retain GTK+ v2 scrolling behavior:
zcat $CWD/ff.ui.scrollToClick.diff.gz | patch -p1 --verbose || exit 1

# ARM hack***************************************
# Hack to avoid upgrading mozilla-nss for a bit:
# *************************************************
sed -i 's?min_nss_version=3.24? min_nss_version=3.23?g' old-configure || exit 1

# Fetch localization, if requested:
if [ ! -z $MOZLOCALIZE ]; then
  LOC_TAG="FIREFOX_$( echo $VERSION | tr \. _ )_RELEASE"
  rm -f $LOC_TAG.tar.bz2
  if echo $MOZVERS | grep -q esr ; then LOC_VERS=release ; else LOC_VERS=$MOZVERS ; fi
   wget https://hg.mozilla.org/releases/l10n/mozilla-$MOZVERS/$MOZLOCALIZE/archive/$LOC_TAG.tar.bz2
  tar xvf $LOC_TAG.tar.bz2
  mv $MOZLOCALIZE-$LOC_TAG $MOZLOCALIZE
fi

# Apply the Debian patch set:
tar xvvf $PORTCWD/sources/firefox*z || exit 1
pushd .
cd debian/patches || exit 1
pwd
# Delete some that were for FF 40.0:
# Grab all of the patches into a variable:
DEBFIXES=$( ls fixes/* )
echo "Fixes: $DEBFIXES"
popd
#  $DEBFIXES \
for i in \
  debian-hacks/Add-a-2-minutes-timeout-on-xpcshell-tests.patch \
  porting/Add-xptcall-support-for-SH4-processors.patch \
 ; do
  auto_apply_patch debian/patches/$i || exit 1
done
# Might be easier to use the old style way of applying everything & excluding stuff in the future:
#while read pf ; do
#  auto_apply_patch debian/patches/$pf  || exit 1
#done< <(egrep -v "^prefs|^iceweasel-branding|^l10n|Bug-756390-Make-the-Reset-Firefox-feature-more-gener|Fixup-Reset-Firefox-after-bad-merge.patch" debian/patches/series)

# Apply some patches from Fedora for ARM:
ln -vfs mozilla mozilla-release # just a hack to avoid editing the patches
for i in $PORTCWD/sources/fedorapatches/* ; do
  auto_apply_patch $i || exit 1
done

# Configure:
# Need to re-generate because of the 'no neon' patch:
# We also need to use autoconf-2.13 (in /extra).
#autoreconf2.13  -vif

# Turn errors back into warnings:
sed -i 's?-Werror?-Wall?g' configure
# These don't work on gcc-4.8.4 (not sure why though)
#for warntype in \
#  char-subscripts \
#  comment \
#  endif-labels \
#  enum-compare \
#  ignored-qualifiers \
#  int-to-pointer-cast \
#  multichar \
#  nonnull \
#  pointer-arith \
#  pointer-sign \
#  return-type \
#  sequence-point \
#  trigraphs \
#  unknown-pragmas \
#  ; do
#  sed -i 's?-Wall='"$warntype"'?-Wall?g' configure
#done
## This isn't present:
#sed -i 's?sys/int_types.h??g' configure
#sed -i 's?-fno-integrated-as??g' configure

# Our building options, in a configure-like display ;)
# ****
# Add    $OPTIMIZE \   back once the ARM hack is gone
# ***
OPTIONS="\
   $SLKCONFARGS \
   --enable-official-branding \
   --prefix=/usr \
   --libdir=/usr/lib${LIBDIRSUFFIX} \
   --with-default-mozilla-five-home=/usr/lib${LIBDIRSUFFIX}/firefox-$RELEASEVER \
   --with-system-zlib \
   --enable-alsa \
   --enable-application=browser \
   --enable-default-toolkit=cairo-gtk3 \
   --enable-startup-notification \
   --enable-strip \
   --enable-cpp-rtti \
   --disable-accessibility \
   --disable-debug "
   # Complains about missing APNG support in Slackware's libpng:
   #--with-system-png \
   # won't build:
   #--enable-system-cairo \
if [ ! -z $MOZLOCALIZE ]; then
  OPTIONS=$OPTIONS" \
   --enable-ui-locale=$MOZLOCALIZE
   --with-l10n-base=.."
  # There are no dictionaries in localized builds
  sed -i \
    -e "/@BINPATH@\/dictionaries\/\*/d" \
    -e "/@RESPATH@\/dictionaries\/\*/d" \
    browser/installer/package-manifest.in || exit 1
fi

# Reduce parallel build jobs since the build host gets hammered:
if [ ! -z "$NUMJOBS" ]; then
   NUMJOBS="-j3"
fi

# ARM: Reduce parallel build jobs since the build host gets hammered:
if [ ! -z "$NUMJOBS" ]; then
   export NUMJOBS="-j3"
 else
   export NUMJOBS="-j1"
fi

# Build:
export MOZILLA_OFFICIAL="1"
export BUILD_OFFICIAL="1"
export MOZ_PACKAGE_JSSHELL="1"
export MOZ_PHOENIX="1"
export LDFLAGS="$SLKLDFLAGS"
export MOZ_LINK_FLAGS="$SLKLDFLAGS"
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCXXFLAGS"
export CPPFLAGS="$SLKCPPFLAGS"
export MOZ_MAKE_FLAGS="$NUMJOBS"

# Force build tests to run as armv4 even though the build box might be >armv5.
export ARM_FORCE_PLATFORM=7

# Clear some variables that could break the build
unset DBUS_SESSION_BUS_ADDRESS ORBIT_SOCKETDIR SESSION_MANAGER \
  XDG_SESSION_COOKIE XAUTHORITY MAKEFLAGS

# Assemble our .mozconfig, we use this method for building, seems
# needed for PGO.
echo ". \$topsrcdir/browser/config/mozconfig" > .mozconfig

# Mozilla devs enforce using an objdir for building
# https://developer.mozilla.org/en/Configuring_Build_Options#Building_with_an_objdir
mkdir obj
echo "mk_add_options MOZ_OBJDIR=$(pwd)/obj" >> .mozconfig

if [ "$MOZLOCALIZE" ]; then
  echo "mk_add_options MOZ_CO_LOCALES=\"$MOZLOCALIZE\"" >> .mozconfig
fi

# Write in it the options above
for option in $OPTIONS; do echo "ac_add_options $option" >> .mozconfig; done

# ARM: see https://bugzilla.redhat.com/show_bug.cgi?id=1426850
# This isn't added using $SLKCONFARGS because it doesn't cater for things with spaces in:
# unless I edit the for loop above to use IFS with some other variable.
# this is easier right now ;-)
echo 'ac_add_options --enable-optimize="-O1 -fno-schedule-insns"' >> .mozconfig

# https://developer.mozilla.org/en-US/docs/Building_with_Profile-Guided_Optimization
# Thanks to ArchLinux and Gentoo for the additional hints.
if [ "$PGO" = "yes" ]; then
  # Do a PGO build, double time and disk space but worth it.
  export MOZ_PGO=1
  echo "mk_add_options PROFILE_GEN_SCRIPT='EXTRA_TEST_ARGS=10 \$(MAKE) -C \$(MOZ_OBJDIR) pgo-profile-run'" >> .mozconfig
  export DISPLAY=:99
  # Launch Xvfb to let the profile scripts run in a X session.
  # Ugly note: if the build breaks you may want to do a "killall Xvfb".
  Xvfb -nolisten tcp -extension GLX -screen 0 1280x1024x24 $DISPLAY &
  dbus-launch --exit-with-session make -f client.mk build || exit 1
  kill $! || true
else
  # Do a normal build
  echo "ac_add_options --disable-tests" >> .mozconfig
  make -f client.mk build || exit 1
fi

# Install into package framework:
make -f client.mk install DESTDIR=$PKG || exit 1

# We don't need these (just symlinks anyway):
rm -rf $PKG/usr/lib${LIBDIRSUFFIX}/firefox-devel-$RELEASEVER

# Nor these:
rm -rf $PKG/usr/include

( cd $PKG/usr/lib${LIBDIRSUFFIX}/firefox-$RELEASEVER
  #mv defaults/profile/mimeTypes.rdf defaults/profile/mimeTypes.rdf.orig || exit 1
  if [ -d defaults/profile ]; then
    zcat $CWD/mimeTypes.rdf > defaults/profile/mimeTypes.rdf || exit 1
  fi
  # OK, this patch is useless on 7.x.  We'll float without it and see what happens.
  # Perhaps it won't make a difference or should be worked around elsewhere.
  #zcat $CWD/firefox.moz_plugin_path.diff.gz \
  #  | sed -e "s#usr/lib#usr/lib${LIBDIRSUFFIX}#g" \
  #  | patch -p1 --verbose --backup --suffix=.orig || exit 1
  # Clean up if the above patch was successful:
  #rm -f firefox.orig
) || exit

mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/mozilla/plugins
mkdir -p $PKG/usr/share/applications
cat $CWD/mozilla-firefox.desktop > $PKG/usr/share/applications/mozilla-firefox.desktop

# These files/directories are usually created if Firefox is run as root,
# which on many systems might (and possibly should) be never.  Therefore, if we
# don't see them we'll put stubs in place to prevent startup errors.
( cd $PKG/usr/lib${LIBDIRSUFFIX}/firefox-$RELEASEVER
  if [ -d extensions/talkback\@mozilla.org ]; then
    if [ ! -r extensions/talkback\@mozilla.org/chrome.manifest ]; then
      echo > extensions/talkback\@mozilla.org/chrome.manifest
    fi
  fi
  if [ ! -d updates ]; then
    mkdir -p updates/0
  fi
)

# Need some default icons in the right place:
for i in 16 22 24 32 48 256; do
  install -m 0644 -D browser/branding/official/default${i}.png \
    $PKG/usr/share/icons/hicolor/${i}x${i}/apps/firefox.png
done
mkdir -p $PKG/usr/share/pixmaps
( cd $PKG/usr/share/pixmaps ; ln -sf /usr/share/icons/hicolor/256x256/apps/firefox.png . )
mkdir -p $PKG/usr/lib$LIBDIRSUFFIX/firefox-$RELEASEVER/chrome/icons/default
install -m 644 browser/branding/official/default16.png \
  $PKG/usr/lib$LIBDIRSUFFIX/firefox-$RELEASEVER/icons/
install -m 644 browser/branding/official/default16.png \
  $PKG/usr/lib$LIBDIRSUFFIX/firefox-$RELEASEVER/chrome/icons/default/

# Copy over the LICENSE
install -p -c -m 644 LICENSE $PKG/usr/lib${LIBDIRSUFFIX}/firefox-$RELEASEVER/

# If necessary, start the fakeroot server so we can set file/dir ownerships:
start_fakeroot

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir
slackslack      # chown -R root:root, chmod -R og-w, slackchown, slack644docs
slackdesc       # install slack-desc and doinst.sh

# Change the architecture of the package name since Firefox 10 and upwards
# do not support armv5:
# The 'hfp' name means that it's 'hardware floating point':
#export SLACKPACKAGE=$PKGNAM-$VERSION-armv6j-$BUILD.txz

if [ ! -z $MOZLOCALIZE ]; then
  BUILD="${BUILD}_${MOZLOCALIZE}"
fi

slackmp         # run makepkg -l y -c n

# Perform any final checks on the package:
cd $PKG

slackhlinks     # search for any hard links
