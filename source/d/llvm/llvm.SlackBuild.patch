--- a/llvm.SlackBuild	2023-03-30 01:08:48.786148023 +0000
+++ b/llvm.SlackBuild	2023-04-03 06:09:23.074045780 +0000
@@ -76,15 +76,25 @@ elif [ "$ARCH" = "i686" ]; then
 elif [ "$ARCH" = "x86_64" ]; then
   SLKCFLAGS="-O2 -fPIC $IGNORE_GNU_EXTENSIONS"
   LIBDIRSUFFIX="64"
+elif [ "$ARCH" = "aarch64" ]; then
+  SLKCFLAGS="-O2 -fPIC $IGNORE_GNU_EXTENSIONS"
+  LIBDIRSUFFIX="64"
+elif [ "$ARCH" = "riscv64" ]; then
+  SLKCFLAGS="-O2 -fPIC $IGNORE_GNU_EXTENSIONS"
+  LIBDIRSUFFIX="64"
 else
   SLKCFLAGS="-O2 $IGNORE_GNU_EXTENSIONS"
   LIBDIRSUFFIX=""
 fi
 
+# Choose a compiler (gcc/g++ or clang/clang++):
+export CC=${CC:-gcc}
+export CXX=${CXX:-g++}
+
 # Building clangd will be determined automatically unless BUILD_CLANG is
 # preset to YES or NO:
 if [ -z $BUILD_CLANGD ]; then
-  if [ "$ARCH" = "i586" -o "$ARCH" = "i686" ]; then
+  if [ "$ARCH" = "i586" -o "$ARCH" = "i686" -o "$ARCH" = "riscv64" ]; then
     BUILD_CLANGD=NO
   else
     BUILD_CLANGD=YES
@@ -176,6 +186,12 @@ cd ..
 ln -sf */runtimes .
 cd -
 
+xzcat $CWD/clang.dynamic.linker.aarch64.patch.xz | patch -p1 --verbose || exit 1
+xzcat $CWD/clang.toolchains.aarch64.triple.patch.xz | patch -p1 --verbose || exit 1
+
+xzcat $CWD/clang.dynamic.linker.riscv64.patch.xz | patch -p1 --verbose || exit 1
+xzcat $CWD/clang.toolchains.riscv64.triple.patch.xz | patch -p1 --verbose || exit 1
+
 chown -R root:root .
 find . \
   \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 -o -perm 511 \) \
@@ -192,6 +208,22 @@ if [ "$LLVM_BUILD_LLVM_DYLIB" = "ON" ];
   SHARED_LIBRARY_OPTIONS="-DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON -DCLANG_LINK_CLANG_DYLIB=ON"
 fi
 
+if [[ "$ARCH" == "riscv64" ]]; then
+    # when compiling gcc
+    # /usr/bin/ld: lib64/liblldbTarget.a(Process.cpp.o): in function `lldb_private::Process::Finalize()':
+    # Process.cpp:(.text._ZN12lldb_private7Process8FinalizeEv+0x2a): undefined reference to `__atomic_exchange_1'
+    [[ $CC == "gcc" ]] && export LDFLAGS="-latomic"
+
+    # /usr/bin/ld: lib64/liblldbPluginProcessLinux.a(NativeThreadLinux.cpp.o): in function `.LBB0_1':
+    # NativeThreadLinux.cpp:(.text._ZN12lldb_private13process_linux17NativeThreadLinuxC2ERNS0_18NativeProcessLinuxEm+0x46): undefined reference to `lldb_private::process_linux::NativeRegisterContextLinux::CreateHostNativeRegisterContextLinux(lldb_private::ArchSpec const&, lldb_private::NativeThreadProtocol&)'
+    OPTIONS="   -DLLDB_TOOL_LLDB_SERVER_BUILD=OFF \
+                -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
+                -DLLVM_ENABLE_LIBCXX:BOOL=OFF \
+                -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF"
+else
+    OPTIONS="   -DLLVM_USE_LINKER=lld"
+fi
+
 mkdir build
 cd build
   mkdir include
@@ -200,8 +232,8 @@ cd build
   # Nuke LLVM libunwind as it conflicts with the one already on the system:
   rm -r ../projects/libunwind
   cmake -GNinja \
-    -DCMAKE_C_COMPILER="clang" \
-    -DCMAKE_CXX_COMPILER="clang++" \
+    -DCMAKE_C_COMPILER="$CC" \
+    -DCMAKE_CXX_COMPILER="$CXX" \
     -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
     -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
     -DCMAKE_INSTALL_PREFIX=/usr \
@@ -210,7 +242,7 @@ cd build
     -DLIBCXXABI_LIBDIR_SUFFIX=${LIBDIRSUFFIX} \
     -DCMAKE_BUILD_TYPE=Release \
     $SHARED_LIBRARY_OPTIONS \
-    -DLLVM_USE_LINKER=lld \
+    $OPTIONS \
     -DLLVM_ENABLE_RTTI=ON \
     -DLLVM_ENABLE_FFI=ON \
     -DLLVM_ENABLE_ZLIB=ON \
