#!/bin/bash

# boost.SlackBuild
# Heavily based on the original Slackware build scripts,
# Modified by Stuart Winter for ARMedslack.
#
# Copyright 2007, 2008 Eric Hameleers, Eindhoven, NL
# Copyright 2007-2008 Heinz Wiesinger
# Copyright 2008, 2009  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# bjam-build system mostly taken from SlackBuild by Eric Hameleers
# Script modified by Robby Workman - no copyright claims or added terms

ICU=${ICU:-no}

# Record toolchain & other info for the build log:
slackbuildinfo

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/$PKGSERIES/$PKGNAM
export PORTCWD=$PWD

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete & re-create temporary directories then cd into $TMPBUILD

# Determine the CFLAGS for the known architectures:
case $ARCH in
   arm)
            export SLKARMFLAGS="--disable-long-double" ;;
esac

# Extract source:
echo "Extracting source.."
tar xf $CWD/boost_$VERSION.tar.?z*
#tar xvvf $PORTCWD/sources/boost_$VERSION.tar.bz2
cd boost* || exit 1
slackhousekeeping

# Don't allow MOC to process this incompatible header:
sed -e '1 i#ifndef Q_MOC_RUN' \
  -e '$ a#endif' \
  -i boost/type_traits/detail/has_binary_operator.hpp

# Apply build fixes for ARM:
#zcat $PORTCWD/sources/boost*diff* | patch -p1
#cat debian/patches/series | while read patch ; do patch --verbose -p1 < debian/patches/$patch ; done || exit 1
#for i in \
#    mpi-allocator-c++0x.patch.xz ; do
#      auto_apply_patch $PORTCWD/sources/$i || exit 1
#    done || exit 1

# This is the python we build against:
PYTHON_VERSION=$(python -c 'import sys; print sys.version[:3]')
PYTHON_FLAGS="-sPYTHON_ROOT=/usr -sPYTHON_VERSION=$PYTHON_VERSION"

echo "************** Building bjam *********************"

# First build bjam, the boost build system:
cd tools/build/src/engine
  CFLAGS="$SLKCFLAGS -fno-strict-aliasing" CC=gcc ./build.sh cc
cd -

BJAM=$(find tools/build/src/engine/ -name b2 -a -type f)

# Create build subdirectory
mkdir obj

echo "************** Building boost *********************"

# Next, we build boost using bjam
$BJAM \
  release \
  $NUMJOBS \
  "-sNO_COMPRESSION=0" \
  "-sZLIB_INCLUDE=/usr/include" \
  "-sZLIB_LIBPATH=/usr/lib${LIBDIRSUFFIX}" \
  "-sBZIP2_INCLUDE=/usr/include" \
  "-sBZIP2_LIBPATH=/usr/lib${LIBDIRSUFFIX}" \
  "-sEXPAT_INCLUDE=/usr/include" \
  "-sEXPAT_LIBPATH=/usr/lib${LIBDIRSUFFIX}" \
  --layout=system \
  --builddir=obj \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --build-type=minimal \
  toolset=gcc \
  variant=release \
  link=shared \
  threading=multi \
  runtime-link=shared \
  cflags="$SLKCFLAGS" \
  cxxflags="$SLKCFLAGS $EXTRA_CXXFLAGS" \
  $SLKARMFLAGS \
  $PYTHON_FLAGS \
  stage # skip failure on ARM - we fail to update 1 target || exit 1

# And then install boost..
mkdir -p $PKG/usr/{lib$LIBDIRSUFFIX,include}

echo "************** Installing Boost *********************"

$BJAM \
  release \
  $NUMJOBS \
  "-sEXPAT_INCLUDE=/usr/include" \
  "-sEXPAT_LIBPATH=/usr/lib${LIBDIRSUFFIX}" \
  --layout=system \
  --builddir=obj \
  --prefix=$PKG/usr \
  --libdir=$PKG/usr/lib${LIBDIRSUFFIX} \
  --build-type=minimal \
  toolset=gcc \
  variant=release \
  link=shared \
  threading=multi \
  runtime-link=shared \
  cflags="$SLKCFLAGS" \
  cxxflags="$SLKCFLAGS $EXTRA_CXXFLAGS" \
  $SLKARMFLAGS \
  $PYTHON_FLAGS \
  install ## || exit 1   # skip failure - on ARM we fail on 1 target but update thousands of others. 

# Copy docs:
mkdir -p $PKG/usr/doc/boost-$VERSION
# Do not copy 44MB of developer 'doc/html' into our package...
cp -a LICENSE* index.html $PKG/usr/doc/boost-$VERSION

# If necessary, start the fakeroot server so we can set file/dir ownerships:
start_fakeroot

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir
slackslack      # chown -R root:root, chmod -R og-w, slackchown, slack644docs
slackdesc       # install slack-desc and doinst.sh

export VERSION="$( echo $VERSION | sed 's?_?.?g' )"
export SLACKPACKAGE=$PKGNAM-$VERSION-$PKGARCH-$BUILD.txz

slackmp         # run makepkg -l y -c n

# Perform any final checks on the package:
cd $PKG
slackhlinks     # search for any hard links
