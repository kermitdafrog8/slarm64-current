#!/bin/bash

# ncurses.SlackBuild
# Almost entirely the original build script for Slackware Linux by Patrick Volkerding
# Modified by Stuart Winter <mozes@slackware.com> for the Slackware porting Project.
# 1-Mar-2004
#
# Copyright 2000-2011, 2013, 2014, 2015, 2016  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/l/ncurses
export PORTCWD=$PWD

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete and re-create temporary directories

# Extract source:
tar xvvf $CWD/$PKGNAM-$VERSION.tar.?z
cd $PKGNAM-$VERSION || exit 1
slackhousekeeping

# Apply upstream patch collection:
xzcat $CWD/ncurses-6.0-20160910-patch.sh.xz > ncurses-6.0-20160910-patch.sh
sh ncurses-6.0-20160910-patch.sh
zcat $CWD/ncurses.mkhashsize.diff.gz | patch -p1 --verbose || exit 1

ncurses_configure() {

# x86_64 flags are: +  X86_64OPTS=" --with-chtype=long --with-mmask-t=long "
# as a reminder incase we need to find some ARM specific ones too.

CPPFLAGS="$SLKCFLAGS" \
CFLAGS="$SLKCFLAGS" \
./configure $WIDEC \
   --prefix=/usr \
   --libdir=/usr/lib${LIBDIRSUFFIX} \
   --mandir=/usr/man \
   --enable-colorfgbg \
   --enable-hard-tabs \
   --enable-overwrite \
   --enable-xmc-glitch \
   --with-cxx-shared \
   --with-ospeed=unsigned \
   --with-termlib=tinfo \
   --with-ticlib=tic \
   --with-gpm \
   --with-shared \
   --without-debug \
   --disable-static \
   --without-profile \
   --enable-pc-files \
   --with-pkg-config-libdir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
   --enable-symlinks \
   --without-ada \
   --program-prefix="" \
   --program-suffix="" \
   --build=$ARCH-slackware-linux-gnueabi || failconfig
}

# Configure & compile normally:
ncurses_configure || failconfig
make $NUMJOBS || make || failmake

# Install into the package directory:
make install DESTDIR=$PKG || failinstall

# Build/install again with wide character support:
make clean
WIDEC=--enable-widec
ncurses_configure || failconfig
make $NUMJOBS || make || failmake
make install DESTDIR=$PKG || failinstall

# Remove static libraries:
for file in libform.a libformw.a libmenu.a libmenuw.a libncurses++.a \
  libncurses++w.a libncurses.a libncursesw.a libpanel.a libpanelw.a \
  libtic.a libtinfo.a libcurses.a ; do
  rm -fv $PKG/usr/lib${LIBDIRSUFFIX}/$file
done

# Check for new static residue:
if ls $PKG/usr/lib${LIBDIRSUFFIX}/*.a 1> /dev/null 2> /dev/null ; then
  echo "BAILING OUT.  A NEW STATIC LIBRARY HAS APPEARED:"
  ls -l $PKG/usr/lib${LIBDIRSUFFIX}/*.a
  exit 1
fi

# Move the include files from /usr/include into /usr/include/ncurses,
# then make symlinks back into /usr/include.
( cd $PKG/usr/include
  rm -rf ncurses
  mkdir -vpm755 ncurses
  mv -fv *.h ncurses
  for file in ncurses/* ; do
    ln -vsf $file .
  done )

# Make an ncursesw symlink to /usr/include/ncurses:
if [ ! -d $PKG/usr/include/ncursesw -a ! -L $PKG/usr/include/ncursesw ]; then
  ( cd $PKG/usr/include ; ln -vsf ncurses ncursesw )
fi

# Move the ncurses libraries into /lib, since they're important:
mkdir -vpm755 $PKG/lib${LIBDIRSUFFIX}
( cd $PKG/usr/lib${LIBDIRSUFFIX}
  chmod 755 *.so
  chmod 644 *.a
  mv -fv libncurses.so.6* $PKG/lib${LIBDIRSUFFIX}
  mv -fv libncursesw.so.6* $PKG/lib${LIBDIRSUFFIX}
  mv -fv libtinfo.so.6* $PKG/lib${LIBDIRSUFFIX}
  rm -fv libtinfo.so.6
  ln -vsf ../../lib${LIBDIRSUFFIX}/libtinfo.so.6 . )

# Use linker loader scripts to make sure -tinfo dependency works:
( cd $PKG/usr/lib${LIBDIRSUFFIX}
  rm -fv libcurses.so libcursesw.so libncurses.so libncursesw.so libtermcap.so
  echo "INPUT(-lncurses)" > libcurses.so
  echo "INPUT(-lncursesw)" > libcursesw.so
  echo "INPUT(libncurses.so.6 -ltinfo)" > libncurses.so
  echo "INPUT(libncursesw.so.6 -ltinfo)" > libncursesw.so
  echo "INPUT(-ltinfo)" > libtermcap.so )

# Use various upstream/fixed/better terminfo files to update the terminfo
# database. Only *.terminfo files in $CWD/terminfo will be used.
export TERMINFO=$PKG/usr/share/terminfo
for tfile in $CWD/terminfo/*.terminfo ; do
  if [ -r $tfile ]; then
    progs/tic -v $tfile
  fi
done
unset TERMINFO

# Add /usr/doc/ncurses-xxxxx with appropriate files:
mkdir -vpm755 $PKG/usr/doc/$PKGNAM-$VERSION/c++
cp -fav \
  ANNOUNCE AUTHORS COPYING* INSTALL MANIFEST NEWS README* TO-DO VERSION \
  $PKG/usr/doc/$PKGNAM-$VERSION/
cp -fav \
  c++/NEWS c++/PROBLEMS c++/README-first \
  $PKG/usr/doc/$PKGNAM-$VERSION/c++/
changelogliposuction NEWS $PKGNAM $VERSION # Trim down a "ChangeLog" file

# If necessary, start the fakeroot server so we can set file/dir ownerships:
start_fakeroot

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir
slackslack      # chown -R root:root, chmod -R og-w, slackchown, slack644docs
slackdesc       # install slack-desc and doinst.sh

# Switch paths for 64bit within the package post installation script:
sed -i "s,usr/lib,usr/lib${LIBDIRSUFFIX},g" $PKG/install/doinst.sh

slackmp         # run makepkg -l y -c n

# Perform any final checks on the package:
cd $PKG
slackhlinks     # search for any hard links
