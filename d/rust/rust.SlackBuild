#!/bin/bash

# rust.SlackBuild
# Heavily based on the original Slackware build scripts,
# Modified by Stuart Winter for Slackware ARM.
#
# Copyright 2017  Andrew Clemons, Wellington, New Zealand
# Copyright 2017  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Record toolchain & other info for the build log:
slackbuildinfo

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/$PKGSERIES/$PKGNAM
export PORTCWD=$PWD

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete & re-create temporary directories then cd into $TMPBUILD

# Version information:
SRCNAM="${PKGNAM}c"
VERSION=${VERSION:-1.19.0}

case $ARCH in
   arm|aarch64) export SLKCFLAGS="$SLKCFLAGS" # not adding anything...yet
		export RUSTFLAGS="-Clink-arg=-Wl,-z,relro,-z,now"
		export LDFLAGS="-Wl,-z,relro"
                export SLK_ARCH_BUILDTARGET="$ARCH-unknown-linux-gnueabihf"
                export LIBDIRSUFFIX="" ;;
   *)           export SLKCFLAGS="-O2" ;;
esac

# Extract source:
echo "Unpacking source - will take a while.."
tar xf $CWD/$SRCNAM-$VERSION-src.tar.xz || exit 1
cd $SRCNAM-$VERSION-src || exit 1
slackhousekeeping

# Apply patches:
auto_apply_patch $PORTCWD/sources/rust-1.19.0-43072-stack-guard.patch.xz || exit 1

# src/bootstrap/config.toml.example
# **
# ** ARM note: we set the target using a variable - so be aware if this part of the SlackBuild changes
# **
cat <<EOF > config.toml
[build]
vendor = true
extended = false
submodules = false

[install]
prefix = "$PKG/usr"
libdir = "lib$LIBDIRSUFFIX"
mandir = "man"

[rust]
channel = "stable"
rpath = false
codegen-tests = false

[target.${SLK_ARCH_BUILDTARGET}]
llvm-config = "/usr/bin/llvm-config"
# build fails using the system jemalloc
# jemalloc = "/usr/lib$LIBDIRSUFFIX/libjemalloc_pic.a"
EOF

# Use system versions:
sed -i "s|^\(vendor = true\)$|\1\nrustc = \"/usr/bin/rustc\"\ncargo = \"/usr/bin/cargo\"|" config.toml

##### ARM stuff - taken from Fedora .spec file ######
# unbundle
rm -rf src/jemalloc/
rm -rf src/llvm/

# These tests assume that alloc_jemalloc is present
# https://github.com/rust-lang/rust/issues/35017
sed -i.jemalloc -e '1i // ignore-test jemalloc is disabled' \
  src/test/compile-fail/allocator-dylib-is-system.rs \
  src/test/compile-fail/allocator-rust-dylib-is-jemalloc.rs \
  src/test/run-pass/allocator-default.rs

# This tests a problem of exponential growth, which seems to be less-reliably
# fixed when running on older LLVM and/or some arches.  Just skip it for now.
sed -i.ignore -e '1i // ignore-test may still be exponential...' \
  src/test/run-pass/issue-41696.rs

# Static linking to distro LLVM needs to add -lffi
# https://github.com/rust-lang/rust/issues/34486
sed -i.ffi -e '$a #[link(name = "ffi")] extern {}' src/librustc_llvm/lib.rs
##### /ARM stuff - taken from Fedora .spec file ######

# Build:
echo "*** Running x.py build ***"
export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"
export CC=clang
export CXX=clang++
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
RUST_BACKTRACE=1 \
python x.py build --verbose || exit 1

echo "*** Running x.py dist ***"
python x.py dist --verbose || exit 1

for dist in rustc rust-std rust-docs ; do
  mkdir unpack
  ( cd unpack
    tar xvf ../build/dist/$dist-$VERSION-$BARCH-unknown-linux-gnu.tar.xz || exit 1
    cd $dist-$VERSION-$BARCH-unknown-linux-gnu || exit 1
    ./install.sh --prefix="$PKG/usr" --mandir="$PKG/usr/man" || exit 1
  ) || exit 1
  rm -rf unpack
done

if [[ "${ARCH}" =~ (x86_64|aarch64) ]]; then
  mv -fv $PKG/usr/lib $PKG/usr/lib$LIBDIRSUFFIX
fi

# Add documentation:
mkdir -vpm755 $PKG/usr/doc
mv -fv $PKG/usr/share/doc/rust $PKG/usr/doc/$PKGNAM-$VERSION
rmdir $PKG/usr/share
cp -fav \
   *.md COPYRIGHT* COPYING* LICENSE* \
   $PKG/usr/doc/$PKGNAM-$VERSION/
# Include docs from third party vendors:
mkdir -vpm755 $PKG/usr/doc/$PKGNAM-$VERSION/vendor
( cd vendor
  tar cf - $(find . | grep -e README -e LICENSE -e COPYING -e CHANGELOG -e PERFORMANCE -e UPGRADE ) | ( cd $PKG/usr/doc/$PKGNAM-$VERSION/vendor ; tar xf - ) )

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir
slackslack      # set standard Slackware file/dir permissions and ownerships
slackdesc       # install slack-desc and doinst.sh
slackmp         # run makepkg -l y -c n

# Perform any final checks on the package:
cd $PKG
slackhlinks     # search for any hard links
