#!/bin/bash

# rust.SlackBuild
# Heavily based on the original Slackware build scripts,
# Modified by Stuart Winter for Slackware ARM.
#
# Copyright 2017  Andrew Clemons, Wellington, New Zealand
# Copyright 2017  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Record toolchain & other info for the build log:
slackbuildinfo

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/$PKGSERIES/$PKGNAM
export PORTCWD=$PWD

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete & re-create temporary directories then cd into $TMPBUILD

# Version information:
SRCNAM="${PKGNAM}c"
VERSION=${VERSION:-1.19.0}

case $ARCH in
   aarch64) #export SLKCFLAGS="-O2"
            export BARCH="aarch64"
            export BABI="gnu"
   arm)     #export SLKCFLAGS="$SLKCFLAGS"
            export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"
            export BARCH="armv7"
            export BABI="gnueabihf"
            export LIBDIRSUFFIX="" ;;
   *)       export SLKCFLAGS="-O2" ;;
esac

# Assemble the build target:
export SLK_ARCH_BUILDTARGET="${BARCH}-unknown-linux-${BABI}"

# Extract source:
echo "Unpacking source - will take a while.."
tar xf $CWD/$SRCNAM-$VERSION-src.tar.?z || exit 1
cd $SRCNAM-$VERSION-src || exit 1
slackhousekeeping

# If you already have rust and cargo installed, you can bootstrap from the
# previous version.
# If you want to build from boot strap binaries: removepkg rust
if [ -x /usr/bin/cargo -a -x /usr/bin/rustc ] ; then
   LOCAL_BOOTSTRAP=yes
fi

if [ -z "$LOCAL_BOOTSTRAP" ] ; then
  # rust requires bootstrapping with the previous rust version.
  # versions are defined in src/stage0.txt
  mkdir -p build/cache/$RSTAGE0_DIR
  cp $PORTCWD/bootstrap/$PRGNAM-std-$RSTAGE0_VERSION-$SLK_ARCH_BUILDTARGET.tar.gz \
     $PORTCWD/bootstrap/$SRCNAM-$RSTAGE0_VERSION-$SLK_ARCH_BUILDTARGET.tar.gz \
     build/cache/$RSTAGE0_DIR

  mkdir -p build/cache/$CSTAGE0_DIR
  cp $PORTCWD/bootstrap/cargo-$CSTAGE0_VERSION-$SLK_ARCH_BUILDTARGET.tar.gz build/cache/$CSTAGE0_DIR
fi

# Apply patches:
#auto_apply_patch $PORTCWD/sources/rust-1.19.0-43072-stack-guard.patch.xz || exit 1
#auto_apply_patch $PORTCWD/sources/rust-1.19.0-43297-configure-debuginfo.patch.xz || exit 1

# src/bootstrap/config.toml.example
cat << EOF > config.toml
[build]
vendor = true
extended = true

[install]
prefix = "/usr"
docdir = "doc/rust-$VERSION"
libdir = "lib$LIBDIRSUFFIX"
mandir = "man"

[rust]
codegen-units = 0
debuginfo = true
channel = "stable"
rpath = false
codegen-tests = false

[target.${SLK_ARCH_BUILDTARGET}]
llvm-config = "/usr/bin/llvm-config"
EOF

if [ ! -z "$LOCAL_BOOTSTRAP" ] ; then
   sed -i "s|^\(extended = true\)$|\1\nrustc = \"/usr/bin/rustc\"\ncargo = \"/usr/bin/cargo\"|" config.toml
fi

# Configure:
#export CC=cc \
#export CXX=c++ \

# Build:
echo "*** Running x.py build ***"
#CC=clang \
#CXX=clang++ \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
python x.py build --verbose || exit 1

echo "*** Running x.py install ***"
#mkdir -vpm755 $PKG
# This currently fails, but it produces what looks like to be a useful package anyway
# Needs investigating, but let's go with what we have so far:
#RUST_BACKTRACE=full DESTDIR=$PKG ./x.py install #|| exit
#DESTDIR=$PKG ./x.py install || exit
DESTDIR=$PKG python x.py install

# Make sure the paths are correct:
sed -i 's?'"$TMPBUILD"'?/?g' $PKG/usr/lib$LIBDIRSUFFIX/rustlib/install.log $PKG/usr/lib$LIBDIRSUFFIX/rustlib/manifest-*
# And a little compression doesn't hurt either:
gzip -9 $PKG/usr/lib$LIBDIRSUFFIX/rustlib/manifest-*

# Add documentation:
mkdir -vpm755 $PKG/usr/doc
mv -fv $PKG/usr/share/doc/rust $PKG/usr/doc/$PKGNAM-$VERSION
rmdir $PKG/usr/share/doc
cp -fav \
   *.md COPYRIGHT* COPYING* LICENSE* \
   $PKG/usr/doc/$PKGNAM-$VERSION/
# Include licenses from third party vendors:
mkdir -vpm755 $PKG/usr/doc/$PKGNAM-$VERSION/vendor
( cd src/vendor
  tar cf - $(find . -maxdepth 2 | grep -e README -e LICENSE -e COPYING -e CHANGELOG -e PERFORMANCE -e UPGRADE ) | ( cd $PKG/usr/doc/$PKGNAM-$VERSION/vendor ; tar xf - )
)

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir
slackslack      # set standard Slackware file/dir permissions and ownerships
slackdesc       # install slack-desc and doinst.sh
slackmp         # run makepkg -l y -c n

# Perform any final checks on the package:
cd $PKG
slackhlinks     # search for any hard links
