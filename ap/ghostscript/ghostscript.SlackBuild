#!/bin/bash

# ghostscript.SlackBuild
# Heavily based on the original Slackware build scripts,
# Modified by Stuart Winter <mozes@slackware.com>
#
# Copyright 2006, 2007  Patrick J. Volkerding, Sebeka, MN, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Record toolchain & other info for the build log:
slackbuildinfo

# Paths to skeleton port's source & real Slackware source tree:
export CWD=$SLACKSOURCE/$PKGSERIES/$PKGNAM
export PORTCWD=$PWD

# Temporary build locations:
export TMPBUILD=$TMP/build-$PKGNAM
export PKG=$TMP/package-$PKGNAM
mkpkgdirs # Delete & re-create temporary directories then cd into $TMPBUILD

if [ -r $CWD/gnu-ghostscript-*.tar.xz ]; then
  SRCPREFIX="gnu-"
fi

# Extract source:
tar xvvf $CWD/${SRCPREFIX}${PKGNAM}-$VERSION.tar.xz
cd ${SRCPREFIX}${PKGNAM}-$VERSION || exit 1
slackhousekeeping

# Remove unmaintained garbage:
rm -rf freetype jpeg lcms2 libpng libtiff png tiff zlib

# Regenerate ./configure.  Needed if patched, or to prevent libtool mismatch.
autoreconf --force --install
( cd jbig2dec ; autoreconf --force --install )
( cd ijs ; autoreconf --force --install )

# Build/install IJS:
( cd ijs
  CFLAGS="$SLKCFLAGS" \
  ./configure \
     --prefix=/usr \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --sysconfdir=/etc \
     --mandir=/usr/man \
     --enable-shared=yes \
     --enable-static=no \
     --program-prefix= \
     --program-suffix= \
     --build=${SLK_ARCH_BUILDTARGET} || failconfig
  make $NUMJOBS || make || failmake
  make install || exit 1
  make install DESTDIR=$PKG || exit 1
) || exit 1

# Configure:
CFLAGS="$SLKCFLAGS" \
./configure \
   --prefix=/usr \
   --libdir=/usr/lib${LIBDIRSUFFIX} \
   --sysconfdir=/etc \
   --mandir=/usr/man \
   --with-fontpath=/usr/share/fonts/TTF \
   --with-ijs \
   --enable-cups \
   --disable-compile-inits \
   --enable-dynamic \
   --with-system-libtiff \
   --program-prefix= \
   --program-suffix= \
   --build=${SLK_ARCH_BUILDTARGET} || failconfig

# Build:
make $NUMJOBS || make || failmake

# Install into package:
make install DESTDIR=$PKG || failinstall
make clean || exit 1
make $NUMJOBS so || make so || failmake
make soinstall DESTDIR=$PKG || failinstall

# Add back ijs-config, which is needed by at least gutenprint to find IJS
# and produce a ghostscript driver:
cat $CWD/ijs-config | sed -e "s/lib64/lib${LIBDIRSUFFIX}/g" > $PKG/usr/bin/ijs-config
chmod 755 $PKG/usr/bin/ijs-config

# Replace the default cidfmap with one containing additional
# support for CJK printing:

if [ -r $PKG/usr/share/ghostscript/*.*/Resource/Init/cidfmap ]; then
  SHARE_VERSION=$(echo $PKG/usr/share/ghostscript/*.*/Resource/Init/cidfmap | rev | cut -f 4 -d / | rev)
  mv -fv $PKG/usr/share/ghostscript/${SHARE_VERSION}/Resource/Init/cidfmap $PKG/usr/share/ghostscript/${SHARE_VERSION}/Resource/Init/cidfmap.default.ghostscript-${VERSION}
  zcat $CWD/cidfmap.gz > $PKG/usr/share/ghostscript/${SHARE_VERSION}/Resource/Init/cidfmap.new
fi

### Moved to cups-filters...
# Many programs expect to find this filter with the old name:
#( cd $PKG/usr/lib${LIBDIRSUFFIX}/cups/filter
#  if [ ! -e pstoraster ]; then
#    ln -sf gstoraster pstoraster
#  fi
#)

# Add a documentation directory:
mkdir -p $PKG/usr/doc/${PKGNAM}-$VERSION
( cd doc
  cp -fav \
    AUTHORS COPYING* ../LICENSE* README* \
    $PKG/usr/doc/${PKGNAM}-$VERSION
)
( cd $PKG/usr/doc/${PKGNAM}-$VERSION
  ln -sf /usr/share/ghostscript/$VERSION/doc doc
)

# Version 9.02 fails to install History9.htm, but also the full unabridged
# history of Ghostscript is not required here.  See the source for that.
( cd doc
  cp -a \
    History*.htm \
    $PKG/usr/share/ghostscript/$VERSION/doc
  rm -f $PKG/usr/share/ghostscript/$VERSION/doc/History{1,2,3,4,5,6,7,8}.htm
  chown root:root $PKG/usr/share/ghostscript/$VERSION/doc/History*htm
  chmod 644 $PKG/usr/share/ghostscript/$VERSION/doc/History*htm
)

# Copy examples:
cd $TMPBUILD
cp -fav ${PKGNAM}-${VERSION}/examples/cjk $PKG/usr/share/ghostscript/${VERSION}/examples/

# If necessary, start the fakeroot server so we can set file/dir ownerships:
start_fakeroot

# Apply generic Slackware packaging policies:
cd $PKG
slackstripall   # strip all .a archives and all ELFs
slackgzpages -i # compress man & info pages and delete usr/info/dir
slackslack      # chown -R root:root, chmod -R og-w, slackchown, slack644docs
slackdesc       # install slack-desc and doinst.sh

cat << EOF > $PKG/install/doinst.sh
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
config usr/share/ghostscript/${VERSION}/Resource/Init/cidfmap.new
EOF

slackmp         # run makepkg -l y -c n

# Perform any final checks on the package:
cd $PKG
slackhlinks     # search for any hard links
